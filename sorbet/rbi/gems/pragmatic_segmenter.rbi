# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pragmatic_segmenter/all/pragmatic_segmenter.rbi
#
# pragmatic_segmenter-0.3.22
module PragmaticSegmenter
end
class PragmaticSegmenter::Rule < Struct
  def pattern; end
  def pattern=(_); end
  def replacement; end
  def replacement=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class PragmaticSegmenter::Text < String
  def apply(*rules); end
end
class PragmaticSegmenter::PunctuationReplacer
  def initialize(text:, matches_array:, match_type: nil); end
  def match_type; end
  def matches_array; end
  def replace; end
  def replace_punctuation(array); end
  def sub_characters(string, char_a, char_b); end
  def text; end
end
module PragmaticSegmenter::PunctuationReplacer::Rules
end
module PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters
end
module PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters
end
class PragmaticSegmenter::BetweenPunctuation
  def btwn_dbl_quote(txt); end
  def initialize(text:); end
  def replace; end
  def sub_punctuation_between_double_quotes(txt); end
  def sub_punctuation_between_em_dashes(txt); end
  def sub_punctuation_between_parens(txt); end
  def sub_punctuation_between_quotes_and_parens(txt); end
  def sub_punctuation_between_quotes_arrow(txt); end
  def sub_punctuation_between_quotes_slanted(txt); end
  def sub_punctuation_between_single_quote_slanted(txt); end
  def sub_punctuation_between_single_quotes(txt); end
  def sub_punctuation_between_square_brackets(txt); end
  def text; end
end
class PragmaticSegmenter::List
  def add_line_break; end
  def add_line_breaks_for_alphabetical_list_with_parens(roman_numeral: nil); end
  def add_line_breaks_for_alphabetical_list_with_periods(roman_numeral: nil); end
  def add_line_breaks_for_numbered_list_with_parens; end
  def add_line_breaks_for_numbered_list_with_periods; end
  def format_alphabetical_lists; end
  def format_numbered_list_with_parens; end
  def format_numbered_list_with_periods; end
  def format_roman_numeral_lists; end
  def initialize(text:); end
  def iterate_alphabet_array(regex, parens: nil, roman_numeral: nil); end
  def last_array_item_replacement(a, i, alphabet, list_array, parens); end
  def other_items_replacement(a, i, alphabet, list_array, parens); end
  def replace_alphabet_list(a); end
  def replace_alphabet_list_parens(a); end
  def replace_correct_alphabet_list(a, parens); end
  def replace_parens; end
  def replace_parens_in_numbered_list; end
  def replace_periods_in_numbered_list; end
  def scan_lists(regex1, regex2, replacement, strip: nil); end
  def substitute_found_list_items(regex, a, strip, replacement); end
  def text; end
end
class PragmaticSegmenter::AbbreviationReplacer
  def initialize(text:, language:); end
  def replace; end
  def replace_abbreviation_as_sentence_boundary(txt); end
  def replace_multi_period_abbreviations(txt); end
  def replace_period_of_abbr(txt, abbr); end
  def replace_possessive_abbreviations(txt); end
  def replace_pre_number_abbr(txt, abbr); end
  def replace_prepositive_abbr(txt, abbr); end
  def scan_for_replacements(txt, am, index, character_array); end
  def search_for_abbreviations_in_string(txt); end
  def text; end
end
module PragmaticSegmenter::ExclamationWords
  def self.apply_rules(text); end
end
class PragmaticSegmenter::Processor
  def abbreviations_replacer; end
  def between_punctuation(txt); end
  def between_punctuation_processor; end
  def check_for_parens_between_quotes(txt); end
  def check_for_punctuation(txt); end
  def consecutive_underscore?(txt); end
  def initialize(language: nil); end
  def post_process_segments(txt); end
  def process(text:); end
  def process_text(txt); end
  def replace_abbreviations; end
  def replace_continuous_punctuation; end
  def replace_numbers; end
  def replace_periods_before_numeric_references; end
  def sentence_boundary_punctuation(txt); end
  def split_into_segments; end
  def text; end
end
class PragmaticSegmenter::Cleaner
  def abbreviations; end
  def check_for_no_space_in_between_sentences; end
  def clean; end
  def clean_consecutive_characters; end
  def clean_quotations; end
  def clean_table_of_contents; end
  def doc_type; end
  def initialize(text:, doc_type: nil, language: nil); end
  def remove_all_newlines; end
  def remove_newline_in_middle_of_sentence; end
  def remove_newline_in_middle_of_word; end
  def remove_pdf_line_breaks; end
  def replace_double_newlines; end
  def replace_escaped_newlines; end
  def replace_newlines; end
  def replace_punctuation_in_brackets; end
  def search_for_connected_sentences(word, txt, regex, rule); end
  def text; end
  include PragmaticSegmenter::Cleaner::Rules
end
module PragmaticSegmenter::Cleaner::Rules
end
module PragmaticSegmenter::Cleaner::Rules::HTML
end
module PragmaticSegmenter::Cleaner::Rules::PDF
end
module PragmaticSegmenter::Languages
  def self.get_language_by_code(code); end
end
module PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Common::Numbers
end
module PragmaticSegmenter::Languages::Common::AmPmRules
end
module PragmaticSegmenter::Languages::Common::SingleLetterAbbreviationRules
end
module PragmaticSegmenter::Languages::Common::EllipsisRules
end
module PragmaticSegmenter::Languages::Common::Abbreviation
end
module PragmaticSegmenter::Languages::Common::Abbreviations
end
module PragmaticSegmenter::Languages::Common::DoublePunctuationRules
end
module PragmaticSegmenter::Languages::Common::ExclamationPointRules
end
module PragmaticSegmenter::Languages::Common::SubSymbolsRules
end
module PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules
end
class PragmaticSegmenter::Languages::Common::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::English
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::English::Cleaner < PragmaticSegmenter::Cleaner
  def abbreviations; end
  def clean; end
  def clean_quotations; end
end
class PragmaticSegmenter::Languages::English::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Deutsch
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Deutsch::Abbreviation
end
module PragmaticSegmenter::Languages::Deutsch::Numbers
end
class PragmaticSegmenter::Languages::Deutsch::Processor < PragmaticSegmenter::Processor
  def replace_numbers; end
  def replace_period_in_deutsch_dates; end
end
class PragmaticSegmenter::Languages::Deutsch::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def replace; end
  def scan_for_replacements(txt, am, index, character_array); end
end
class PragmaticSegmenter::Languages::Deutsch::BetweenPunctuation < PragmaticSegmenter::BetweenPunctuation
  def btwn_dbl_quote(txt); end
end
module PragmaticSegmenter::Languages::Hindi
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Hindi::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Persian
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Persian::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def scan_for_replacements(txt, am, index, character_array); end
end
module PragmaticSegmenter::Languages::Amharic
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Amharic::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Arabic
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Arabic::Abbreviation
end
class PragmaticSegmenter::Languages::Arabic::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def scan_for_replacements(txt, am, index, character_array); end
end
module PragmaticSegmenter::Languages::Greek
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Greek::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Armenian
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Armenian::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Burmese
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Burmese::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Urdu
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Urdu::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::French
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::French::Abbreviation
end
class PragmaticSegmenter::Languages::French::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Italian
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Italian::Abbreviation
end
class PragmaticSegmenter::Languages::Italian::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Spanish
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Spanish::Abbreviation
end
class PragmaticSegmenter::Languages::Spanish::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Russian
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Russian::Abbreviation
end
class PragmaticSegmenter::Languages::Russian::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def replace_period_of_abbr(txt, abbr); end
end
module PragmaticSegmenter::Languages::Japanese
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Japanese::Cleaner < PragmaticSegmenter::Cleaner
  def clean; end
  def remove_newline_in_middle_of_word; end
end
class PragmaticSegmenter::Languages::Japanese::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
class PragmaticSegmenter::Languages::Japanese::BetweenPunctuation < PragmaticSegmenter::BetweenPunctuation
  def sub_punctuation_between_parens_ja(txt); end
  def sub_punctuation_between_quotes_and_parens(txt); end
  def sub_punctuation_between_quotes_ja(txt); end
end
module PragmaticSegmenter::Languages::Dutch
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Dutch::Abbreviation
end
module PragmaticSegmenter::Languages::Polish
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Polish::Abbreviation
end
class PragmaticSegmenter::Languages::Polish::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
module PragmaticSegmenter::Languages::Chinese
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Chinese::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
end
class PragmaticSegmenter::Languages::Chinese::BetweenPunctuation < PragmaticSegmenter::BetweenPunctuation
  def sub_punctuation_between_double_angled_quotation_marks(txt); end
  def sub_punctuation_between_l_bracket(txt); end
  def sub_punctuation_between_quotes_and_parens(txt); end
end
module PragmaticSegmenter::Languages::Bulgarian
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Bulgarian::Abbreviation
end
class PragmaticSegmenter::Languages::Bulgarian::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def replace_period_of_abbr(txt, abbr); end
end
module PragmaticSegmenter::Languages::Danish
  include PragmaticSegmenter::Languages::Common
end
class PragmaticSegmenter::Languages::Danish::Cleaner < PragmaticSegmenter::Cleaner
  def abbreviations; end
  def clean; end
  def clean_quotations; end
end
module PragmaticSegmenter::Languages::Danish::Abbreviation
end
module PragmaticSegmenter::Languages::Danish::Numbers
end
class PragmaticSegmenter::Languages::Danish::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def replace_abbreviation_as_sentence_boundary(txt); end
end
module PragmaticSegmenter::Languages::Kazakh
  include PragmaticSegmenter::Languages::Common
end
module PragmaticSegmenter::Languages::Kazakh::Abbreviation
end
class PragmaticSegmenter::Languages::Kazakh::Processor < PragmaticSegmenter::Processor
  def between_punctuation(txt); end
end
class PragmaticSegmenter::Languages::Kazakh::AbbreviationReplacer < PragmaticSegmenter::AbbreviationReplacer
  def replace; end
end
class PragmaticSegmenter::Segmenter
  def cleaner; end
  def doc_type; end
  def initialize(text:, language: nil, doc_type: nil, clean: nil); end
  def language; end
  def processor; end
  def segment; end
  def text; end
end
