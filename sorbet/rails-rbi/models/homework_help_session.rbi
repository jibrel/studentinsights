# This is an autogenerated file for dynamic methods in HomeworkHelpSession
# Please rerun rake rails_rbi:models to regenerate.
# typed: true

class HomeworkHelpSession::ActiveRecord_Relation < ActiveRecord::Relation
  include HomeworkHelpSession::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: HomeworkHelpSession)
end

class HomeworkHelpSession::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include HomeworkHelpSession::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: HomeworkHelpSession)
end

class HomeworkHelpSession < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend HomeworkHelpSession::ModelRelationShared
  include HomeworkHelpSession::InstanceMethods
  Elem = type_template(fixed: HomeworkHelpSession)
end

module HomeworkHelpSession::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T.any(Array, T::Boolean, Float, Hash, Integer, String))) }
  def course_ids(); end

  sig { params(value: T.nilable(T.any(Array, T::Boolean, Float, Hash, Integer, String))).void }
  def course_ids=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def course_ids?(*args); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def form_timestamp(); end

  sig { params(value: T.nilable(DateTime)).void }
  def form_timestamp=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def form_timestamp?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(Integer) }
  def recorded_by_educator_id(); end

  sig { params(value: Integer).void }
  def recorded_by_educator_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def recorded_by_educator_id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def student_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def student_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_id?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class HomeworkHelpSession
  extend T::Sig

  sig { returns(T.nilable(::Student)) }
  def student(); end

  sig { params(value: T.nilable(::Student)).void }
  def student=(value); end

end

module HomeworkHelpSession::ModelRelationShared
  extend T::Sig

  sig { returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HomeworkHelpSession::ActiveRecord_Relation) }
  def except(*args, &block); end

end
