# This is an autogenerated file for dynamic methods in DisciplineIncident
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class DisciplineIncident::ActiveRecord_Relation < ActiveRecord::Relation
  include DisciplineIncident::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: DisciplineIncident)
end

class DisciplineIncident::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include DisciplineIncident::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: DisciplineIncident)
end

class DisciplineIncident < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend DisciplineIncident::ModelRelationShared
  include DisciplineIncident::InstanceMethods
  Elem = type_template(fixed: DisciplineIncident)
end

module DisciplineIncident::InstanceMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def has_exact_time(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def has_exact_time=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def has_exact_time?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def incident_code(); end

  sig { params(value: T.nilable(String)).void }
  def incident_code=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def incident_code?(*args); end

  sig { returns(T.nilable(String)) }
  def incident_description(); end

  sig { params(value: T.nilable(String)).void }
  def incident_description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def incident_description?(*args); end

  sig { returns(T.nilable(String)) }
  def incident_location(); end

  sig { params(value: T.nilable(String)).void }
  def incident_location=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def incident_location?(*args); end

  sig { returns(DateTime) }
  def occurred_at(); end

  sig { params(value: DateTime).void }
  def occurred_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def occurred_at?(*args); end

  sig { returns(Integer) }
  def student_id(); end

  sig { params(value: Integer).void }
  def student_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_id?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class DisciplineIncident
  extend T::Sig

  sig { returns(::Student) }
  def student(); end

  sig { params(value: ::Student).void }
  def student=(value); end

end

module DisciplineIncident::ModelRelationShared
  extend T::Sig

  sig { returns(DisciplineIncident::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(DisciplineIncident::ActiveRecord_Relation) }
  def except(*args, &block); end

end
