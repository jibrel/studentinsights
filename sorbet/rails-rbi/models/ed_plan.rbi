# This is an autogenerated file for dynamic methods in EdPlan
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class EdPlan::ActiveRecord_Relation < ActiveRecord::Relation
  include EdPlan::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: EdPlan)
end

class EdPlan::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include EdPlan::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: EdPlan)
end

class EdPlan < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend EdPlan::ModelRelationShared
  include EdPlan::InstanceMethods
  Elem = type_template(fixed: EdPlan)
end

module EdPlan::InstanceMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Date)) }
  def sep_district_signed_date(); end

  sig { params(value: T.nilable(Date)).void }
  def sep_district_signed_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_district_signed_date?(*args); end

  sig { returns(Date) }
  def sep_effective_date(); end

  sig { params(value: Date).void }
  def sep_effective_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_effective_date?(*args); end

  sig { returns(T.nilable(Date)) }
  def sep_end_date(); end

  sig { params(value: T.nilable(Date)).void }
  def sep_end_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_end_date?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_001(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_001=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_001?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_002(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_002=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_002?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_003(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_003=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_003?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_004(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_004=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_004?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_005(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_005=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_005?(*args); end

  sig { returns(String) }
  def sep_fieldd_006(); end

  sig { params(value: String).void }
  def sep_fieldd_006=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_006?(*args); end

  sig { returns(String) }
  def sep_fieldd_007(); end

  sig { params(value: String).void }
  def sep_fieldd_007=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_007?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_008(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_008=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_008?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_009(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_009=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_009?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_010(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_010=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_010?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_011(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_011=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_011?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_012(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_012=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_012?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_013(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_013=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_013?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_fieldd_014(); end

  sig { params(value: T.nilable(String)).void }
  def sep_fieldd_014=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_fieldd_014?(*args); end

  sig { returns(T.nilable(Date)) }
  def sep_last_meeting_date(); end

  sig { params(value: T.nilable(Date)).void }
  def sep_last_meeting_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_last_meeting_date?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def sep_last_modified(); end

  sig { params(value: T.nilable(DateTime)).void }
  def sep_last_modified=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_last_modified?(*args); end

  sig { returns(String) }
  def sep_oid(); end

  sig { params(value: String).void }
  def sep_oid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_oid?(*args); end

  sig { returns(T.nilable(Date)) }
  def sep_parent_signed_date(); end

  sig { params(value: T.nilable(Date)).void }
  def sep_parent_signed_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_parent_signed_date?(*args); end

  sig { returns(T.nilable(Date)) }
  def sep_review_date(); end

  sig { params(value: T.nilable(Date)).void }
  def sep_review_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_review_date?(*args); end

  sig { returns(T.nilable(String)) }
  def sep_status(); end

  sig { params(value: T.nilable(String)).void }
  def sep_status=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sep_status?(*args); end

  sig { returns(Integer) }
  def student_id(); end

  sig { params(value: Integer).void }
  def student_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_id?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class EdPlan
  extend T::Sig

  sig { returns(::EdPlanAccommodation::ActiveRecord_Associations_CollectionProxy) }
  def ed_plan_accommodations(); end

  sig { params(value: T.any(T::Array[::EdPlanAccommodation], ::EdPlanAccommodation::ActiveRecord_Associations_CollectionProxy)).void }
  def ed_plan_accommodations=(value); end

  sig { returns(::Student) }
  def student(); end

  sig { params(value: ::Student).void }
  def student=(value); end

end

module EdPlan::ModelRelationShared
  extend T::Sig

  sig { returns(EdPlan::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlan::ActiveRecord_Relation) }
  def except(*args, &block); end

end
