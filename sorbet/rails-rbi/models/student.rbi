# This is an autogenerated file for dynamic methods in Student
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Student::ActiveRecord_Relation < ActiveRecord::Relation
  include Student::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Student)
end

class Student::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Student::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Student)
end

class Student < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Student::ModelRelationShared
  include Student::InstanceMethods
  Elem = type_template(fixed: Student)
end

module Student::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def counselor(); end

  sig { params(value: T.nilable(String)).void }
  def counselor=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def counselor?(*args); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def date_of_birth(); end

  sig { params(value: T.nilable(DateTime)).void }
  def date_of_birth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date_of_birth?(*args); end

  sig { returns(T.nilable(String)) }
  def disability(); end

  sig { params(value: T.nilable(String)).void }
  def disability=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def disability?(*args); end

  sig { returns(T.nilable(Date)) }
  def ell_entry_date(); end

  sig { params(value: T.nilable(Date)).void }
  def ell_entry_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ell_entry_date?(*args); end

  sig { returns(T.nilable(Date)) }
  def ell_transition_date(); end

  sig { params(value: T.nilable(Date)).void }
  def ell_transition_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ell_transition_date?(*args); end

  sig { returns(T.nilable(String)) }
  def enrollment_status(); end

  sig { params(value: T.nilable(String)).void }
  def enrollment_status=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def enrollment_status?(*args); end

  sig { returns(String) }
  def first_name(); end

  sig { params(value: String).void }
  def first_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def first_name?(*args); end

  sig { returns(T.nilable(String)) }
  def free_reduced_lunch(); end

  sig { params(value: T.nilable(String)).void }
  def free_reduced_lunch=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def free_reduced_lunch?(*args); end

  sig { returns(T.nilable(String)) }
  def gender(); end

  sig { params(value: T.nilable(String)).void }
  def gender=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gender?(*args); end

  sig { returns(T.nilable(String)) }
  def grade(); end

  sig { params(value: T.nilable(String)).void }
  def grade=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def grade?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def hispanic_latino(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def hispanic_latino=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def hispanic_latino?(*args); end

  sig { returns(T.nilable(String)) }
  def home_language(); end

  sig { params(value: T.nilable(String)).void }
  def home_language=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def home_language?(*args); end

  sig { returns(T.nilable(Integer)) }
  def homeroom_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def homeroom_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def homeroom_id?(*args); end

  sig { returns(T.nilable(String)) }
  def house(); end

  sig { params(value: T.nilable(String)).void }
  def house=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def house?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(String) }
  def last_name(); end

  sig { params(value: String).void }
  def last_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def last_name?(*args); end

  sig { returns(T.nilable(String)) }
  def limited_english_proficiency(); end

  sig { params(value: T.nilable(String)).void }
  def limited_english_proficiency=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def limited_english_proficiency?(*args); end

  sig { returns(String) }
  def local_id(); end

  sig { params(value: String).void }
  def local_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def local_id?(*args); end

  sig { returns(T::Boolean) }
  def missing_from_last_export(); end

  sig { params(value: T::Boolean).void }
  def missing_from_last_export=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def missing_from_last_export?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_mcas_ela_growth(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_mcas_ela_growth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_ela_growth?(*args); end

  sig { returns(T.nilable(String)) }
  def most_recent_mcas_ela_performance(); end

  sig { params(value: T.nilable(String)).void }
  def most_recent_mcas_ela_performance=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_ela_performance?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_mcas_ela_scaled(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_mcas_ela_scaled=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_ela_scaled?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_mcas_math_growth(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_mcas_math_growth=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_math_growth?(*args); end

  sig { returns(T.nilable(String)) }
  def most_recent_mcas_math_performance(); end

  sig { params(value: T.nilable(String)).void }
  def most_recent_mcas_math_performance=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_math_performance?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_mcas_math_scaled(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_mcas_math_scaled=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_mcas_math_scaled?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_star_math_percentile(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_star_math_percentile=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_star_math_percentile?(*args); end

  sig { returns(T.nilable(Integer)) }
  def most_recent_star_reading_percentile(); end

  sig { params(value: T.nilable(Integer)).void }
  def most_recent_star_reading_percentile=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def most_recent_star_reading_percentile?(*args); end

  sig { returns(T.nilable(String)) }
  def plan_504(); end

  sig { params(value: T.nilable(String)).void }
  def plan_504=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def plan_504?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_email(); end

  sig { params(value: T.nilable(String)).void }
  def primary_email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_email?(*args); end

  sig { returns(T.nilable(String)) }
  def primary_phone(); end

  sig { params(value: T.nilable(String)).void }
  def primary_phone=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def primary_phone?(*args); end

  sig { returns(T.nilable(String)) }
  def program_assigned(); end

  sig { params(value: T.nilable(String)).void }
  def program_assigned=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def program_assigned?(*args); end

  sig { returns(T.nilable(String)) }
  def race(); end

  sig { params(value: T.nilable(String)).void }
  def race=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def race?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def registration_date(); end

  sig { params(value: T.nilable(DateTime)).void }
  def registration_date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def registration_date?(*args); end

  sig { returns(Integer) }
  def school_id(); end

  sig { params(value: Integer).void }
  def school_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def school_id?(*args); end

  sig { returns(T.nilable(String)) }
  def sped_level_of_need(); end

  sig { params(value: T.nilable(String)).void }
  def sped_level_of_need=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sped_level_of_need?(*args); end

  sig { returns(T.nilable(String)) }
  def sped_liaison(); end

  sig { params(value: T.nilable(String)).void }
  def sped_liaison=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sped_liaison?(*args); end

  sig { returns(T.nilable(String)) }
  def sped_placement(); end

  sig { params(value: T.nilable(String)).void }
  def sped_placement=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def sped_placement?(*args); end

  sig { returns(T.nilable(String)) }
  def state_id(); end

  sig { params(value: T.nilable(String)).void }
  def state_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def state_id?(*args); end

  sig { returns(T.nilable(String)) }
  def student_address(); end

  sig { params(value: T.nilable(String)).void }
  def student_address=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_address?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Student
  extend T::Sig

  sig { returns(::Absence::ActiveRecord_Associations_CollectionProxy) }
  def absences(); end

  sig { params(value: T.any(T::Array[::Absence], ::Absence::ActiveRecord_Associations_CollectionProxy)).void }
  def absences=(value); end

  sig { returns(::Assessment::ActiveRecord_Associations_CollectionProxy) }
  def assessments(); end

  sig { params(value: T.any(T::Array[::Assessment], ::Assessment::ActiveRecord_Associations_CollectionProxy)).void }
  def assessments=(value); end

  sig { returns(::DibelsResult::ActiveRecord_Associations_CollectionProxy) }
  def dibels_results(); end

  sig { params(value: T.any(T::Array[::DibelsResult], ::DibelsResult::ActiveRecord_Associations_CollectionProxy)).void }
  def dibels_results=(value); end

  sig { returns(::DisciplineIncident::ActiveRecord_Associations_CollectionProxy) }
  def discipline_incidents(); end

  sig { params(value: T.any(T::Array[::DisciplineIncident], ::DisciplineIncident::ActiveRecord_Associations_CollectionProxy)).void }
  def discipline_incidents=(value); end

  sig { returns(::EdPlan::ActiveRecord_Associations_CollectionProxy) }
  def ed_plans(); end

  sig { params(value: T.any(T::Array[::EdPlan], ::EdPlan::ActiveRecord_Associations_CollectionProxy)).void }
  def ed_plans=(value); end

  sig { returns(::EventNote::ActiveRecord_Associations_CollectionProxy) }
  def event_notes(); end

  sig { params(value: T.any(T::Array[::EventNote], ::EventNote::ActiveRecord_Associations_CollectionProxy)).void }
  def event_notes=(value); end

  sig { returns(::FAndPAssessment::ActiveRecord_Associations_CollectionProxy) }
  def f_and_p_assessments(); end

  sig { params(value: T.any(T::Array[::FAndPAssessment], ::FAndPAssessment::ActiveRecord_Associations_CollectionProxy)).void }
  def f_and_p_assessments=(value); end

  sig { returns(T.nilable(::Homeroom)) }
  def homeroom(); end

  sig { params(value: T.nilable(::Homeroom)).void }
  def homeroom=(value); end

  sig { returns(::HomeworkHelpSession::ActiveRecord_Associations_CollectionProxy) }
  def homework_help_sessions(); end

  sig { params(value: T.any(T::Array[::HomeworkHelpSession], ::HomeworkHelpSession::ActiveRecord_Associations_CollectionProxy)).void }
  def homework_help_sessions=(value); end

  sig { returns(::IepDocument::ActiveRecord_Associations_CollectionProxy) }
  def iep_documents(); end

  sig { params(value: T.any(T::Array[::IepDocument], ::IepDocument::ActiveRecord_Associations_CollectionProxy)).void }
  def iep_documents=(value); end

  sig { returns(::Intervention::ActiveRecord_Associations_CollectionProxy) }
  def interventions(); end

  sig { params(value: T.any(T::Array[::Intervention], ::Intervention::ActiveRecord_Associations_CollectionProxy)).void }
  def interventions=(value); end

  sig { returns(::ReadingBenchmarkDataPoint::ActiveRecord_Associations_CollectionProxy) }
  def reading_benchmark_data_points(); end

  sig { params(value: T.any(T::Array[::ReadingBenchmarkDataPoint], ::ReadingBenchmarkDataPoint::ActiveRecord_Associations_CollectionProxy)).void }
  def reading_benchmark_data_points=(value); end

  sig { returns(::School) }
  def school(); end

  sig { params(value: ::School).void }
  def school=(value); end

  sig { returns(::SecondTransitionNote::ActiveRecord_Associations_CollectionProxy) }
  def second_transition_notes(); end

  sig { params(value: T.any(T::Array[::SecondTransitionNote], ::SecondTransitionNote::ActiveRecord_Associations_CollectionProxy)).void }
  def second_transition_notes=(value); end

  sig { returns(::Section::ActiveRecord_Associations_CollectionProxy) }
  def sections(); end

  sig { params(value: T.any(T::Array[::Section], ::Section::ActiveRecord_Associations_CollectionProxy)).void }
  def sections=(value); end

  sig { returns(::Service::ActiveRecord_Associations_CollectionProxy) }
  def services(); end

  sig { params(value: T.any(T::Array[::Service], ::Service::ActiveRecord_Associations_CollectionProxy)).void }
  def services=(value); end

  sig { returns(::StarMathResult::ActiveRecord_Associations_CollectionProxy) }
  def star_math_results(); end

  sig { params(value: T.any(T::Array[::StarMathResult], ::StarMathResult::ActiveRecord_Associations_CollectionProxy)).void }
  def star_math_results=(value); end

  sig { returns(::StarReadingResult::ActiveRecord_Associations_CollectionProxy) }
  def star_reading_results(); end

  sig { params(value: T.any(T::Array[::StarReadingResult], ::StarReadingResult::ActiveRecord_Associations_CollectionProxy)).void }
  def star_reading_results=(value); end

  sig { returns(::StudentAssessment::ActiveRecord_Associations_CollectionProxy) }
  def student_assessments(); end

  sig { params(value: T.any(T::Array[::StudentAssessment], ::StudentAssessment::ActiveRecord_Associations_CollectionProxy)).void }
  def student_assessments=(value); end

  sig { returns(::StudentPhoto::ActiveRecord_Associations_CollectionProxy) }
  def student_photos(); end

  sig { params(value: T.any(T::Array[::StudentPhoto], ::StudentPhoto::ActiveRecord_Associations_CollectionProxy)).void }
  def student_photos=(value); end

  sig { returns(::StudentSectionAssignment::ActiveRecord_Associations_CollectionProxy) }
  def student_section_assignments(); end

  sig { params(value: T.any(T::Array[::StudentSectionAssignment], ::StudentSectionAssignment::ActiveRecord_Associations_CollectionProxy)).void }
  def student_section_assignments=(value); end

  sig { returns(::Tardy::ActiveRecord_Associations_CollectionProxy) }
  def tardies(); end

  sig { params(value: T.any(T::Array[::Tardy], ::Tardy::ActiveRecord_Associations_CollectionProxy)).void }
  def tardies=(value); end

  sig { returns(::TransitionNote::ActiveRecord_Associations_CollectionProxy) }
  def transition_notes(); end

  sig { params(value: T.any(T::Array[::TransitionNote], ::TransitionNote::ActiveRecord_Associations_CollectionProxy)).void }
  def transition_notes=(value); end

end

module Student::ModelRelationShared
  extend T::Sig

  sig { returns(Student::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Student::ActiveRecord_Relation) }
  def except(*args, &block); end

end
