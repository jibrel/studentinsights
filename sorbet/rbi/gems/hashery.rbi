# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hashery/all/hashery.rbi
#
# hashery-2.1.2
module Hashery
end
class Hashery::LRUHash
  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def clear; end
  def default; end
  def default=(arg0); end
  def default_proc; end
  def default_proc=(arg0); end
  def delete(key); end
  def delete_if; end
  def delete_oldest; end
  def each; end
  def each_key; end
  def each_node; end
  def each_pair; end
  def each_value; end
  def empty?; end
  def fetch(key, &b); end
  def front(node); end
  def has_key?(key); end
  def has_value?(value); end
  def include?(key); end
  def initialize(max_size, default_value = nil, &block); end
  def inspect; end
  def key(value); end
  def key?(key); end
  def keys; end
  def max_size; end
  def max_size=(limit); end
  def member?(key); end
  def normalize_max(n); end
  def rassoc(value); end
  def release_proc; end
  def release_proc=(arg0); end
  def remove_node(node); end
  def size; end
  def store(key, value); end
  def to_s; end
  def value?(value); end
  def values; end
  def values_at(*key_list); end
  include Enumerable
end
class Hashery::LRUHash::Node < Struct
  def insert_after(node); end
  def key; end
  def key=(_); end
  def pred; end
  def pred=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def succ; end
  def succ=(_); end
  def unlink; end
  def value; end
  def value=(_); end
end
