# This is an autogenerated file for dynamic methods in StudentVoiceCompletedSurvey
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class StudentVoiceCompletedSurvey::ActiveRecord_Relation < ActiveRecord::Relation
  include StudentVoiceCompletedSurvey::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: StudentVoiceCompletedSurvey)
end

class StudentVoiceCompletedSurvey::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include StudentVoiceCompletedSurvey::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: StudentVoiceCompletedSurvey)
end

class StudentVoiceCompletedSurvey < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend StudentVoiceCompletedSurvey::ModelRelationShared
  include StudentVoiceCompletedSurvey::InstanceMethods
  Elem = type_template(fixed: StudentVoiceCompletedSurvey)
end

module StudentVoiceCompletedSurvey::InstanceMethods
  extend T::Sig

  sig { returns(String) }
  def activities_and_interests(); end

  sig { params(value: String).void }
  def activities_and_interests=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def activities_and_interests?(*args); end

  sig { returns(String) }
  def best_qualities(); end

  sig { params(value: String).void }
  def best_qualities=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def best_qualities?(*args); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(String) }
  def first_name(); end

  sig { params(value: String).void }
  def first_name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def first_name?(*args); end

  sig { returns(DateTime) }
  def form_timestamp(); end

  sig { params(value: DateTime).void }
  def form_timestamp=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def form_timestamp?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(String) }
  def learn_best(); end

  sig { params(value: String).void }
  def learn_best=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def learn_best?(*args); end

  sig { returns(String) }
  def nervous_or_stressed(); end

  sig { params(value: String).void }
  def nervous_or_stressed=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def nervous_or_stressed?(*args); end

  sig { returns(String) }
  def proud(); end

  sig { params(value: String).void }
  def proud=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def proud?(*args); end

  sig { returns(Integer) }
  def student_id(); end

  sig { params(value: Integer).void }
  def student_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_id?(*args); end

  sig { returns(String) }
  def student_lasid(); end

  sig { params(value: String).void }
  def student_lasid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_lasid?(*args); end

  sig { returns(Integer) }
  def student_voice_survey_upload_id(); end

  sig { params(value: Integer).void }
  def student_voice_survey_upload_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_voice_survey_upload_id?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class StudentVoiceCompletedSurvey
  extend T::Sig

  sig { returns(::Student) }
  def student(); end

  sig { params(value: ::Student).void }
  def student=(value); end

  sig { returns(::StudentVoiceSurveyUpload) }
  def student_voice_survey_upload(); end

  sig { params(value: ::StudentVoiceSurveyUpload).void }
  def student_voice_survey_upload=(value); end

end

module StudentVoiceCompletedSurvey::ModelRelationShared
  extend T::Sig

  sig { returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StudentVoiceCompletedSurvey::ActiveRecord_Relation) }
  def except(*args, &block); end

end
