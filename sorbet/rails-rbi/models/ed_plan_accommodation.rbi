# This is an autogenerated file for dynamic methods in EdPlanAccommodation
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class EdPlanAccommodation::ActiveRecord_Relation < ActiveRecord::Relation
  include EdPlanAccommodation::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: EdPlanAccommodation)
end

class EdPlanAccommodation::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include EdPlanAccommodation::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: EdPlanAccommodation)
end

class EdPlanAccommodation < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend EdPlanAccommodation::ModelRelationShared
  include EdPlanAccommodation::InstanceMethods
  Elem = type_template(fixed: EdPlanAccommodation)
end

module EdPlanAccommodation::InstanceMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def ed_plan_id(); end

  sig { params(value: Integer).void }
  def ed_plan_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def ed_plan_id?(*args); end

  sig { returns(T.nilable(String)) }
  def iac_description(); end

  sig { params(value: T.nilable(String)).void }
  def iac_description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def iac_description?(*args); end

  sig { returns(T.nilable(String)) }
  def iac_field(); end

  sig { params(value: T.nilable(String)).void }
  def iac_field=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def iac_field?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def iac_last_modified(); end

  sig { params(value: T.nilable(DateTime)).void }
  def iac_last_modified=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def iac_last_modified?(*args); end

  sig { returns(String) }
  def iac_oid(); end

  sig { params(value: String).void }
  def iac_oid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def iac_oid?(*args); end

  sig { returns(String) }
  def iac_sep_oid(); end

  sig { params(value: String).void }
  def iac_sep_oid=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def iac_sep_oid?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class EdPlanAccommodation
  extend T::Sig

  sig { returns(::EdPlan) }
  def ed_plan(); end

  sig { params(value: ::EdPlan).void }
  def ed_plan=(value); end

end

module EdPlanAccommodation::ModelRelationShared
  extend T::Sig

  sig { returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EdPlanAccommodation::ActiveRecord_Relation) }
  def except(*args, &block); end

end
