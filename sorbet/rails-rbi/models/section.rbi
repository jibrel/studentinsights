# This is an autogenerated file for dynamic methods in Section
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Section::ActiveRecord_Relation < ActiveRecord::Relation
  include Section::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Section)
end

class Section::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Section::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Section)
end

class Section < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Section::ModelRelationShared
  include Section::InstanceMethods
  Elem = type_template(fixed: Section)
end

module Section::InstanceMethods
  extend T::Sig

  sig { returns(Integer) }
  def course_id(); end

  sig { params(value: Integer).void }
  def course_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def course_id?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def room_number(); end

  sig { params(value: T.nilable(String)).void }
  def room_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def room_number?(*args); end

  sig { returns(T.nilable(String)) }
  def schedule(); end

  sig { params(value: T.nilable(String)).void }
  def schedule=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def schedule?(*args); end

  sig { returns(String) }
  def section_number(); end

  sig { params(value: String).void }
  def section_number=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def section_number?(*args); end

  sig { returns(String) }
  def term_local_id(); end

  sig { params(value: String).void }
  def term_local_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def term_local_id?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Section
  extend T::Sig

  sig { returns(::Course) }
  def course(); end

  sig { params(value: ::Course).void }
  def course=(value); end

  sig { returns(::EducatorSectionAssignment::ActiveRecord_Associations_CollectionProxy) }
  def educator_section_assignments(); end

  sig { params(value: T.any(T::Array[::EducatorSectionAssignment], ::EducatorSectionAssignment::ActiveRecord_Associations_CollectionProxy)).void }
  def educator_section_assignments=(value); end

  sig { returns(::Educator::ActiveRecord_Associations_CollectionProxy) }
  def educators(); end

  sig { params(value: T.any(T::Array[::Educator], ::Educator::ActiveRecord_Associations_CollectionProxy)).void }
  def educators=(value); end

  sig { returns(::StudentSectionAssignment::ActiveRecord_Associations_CollectionProxy) }
  def student_section_assignments(); end

  sig { params(value: T.any(T::Array[::StudentSectionAssignment], ::StudentSectionAssignment::ActiveRecord_Associations_CollectionProxy)).void }
  def student_section_assignments=(value); end

  sig { returns(::Student::ActiveRecord_Associations_CollectionProxy) }
  def students(); end

  sig { params(value: T.any(T::Array[::Student], ::Student::ActiveRecord_Associations_CollectionProxy)).void }
  def students=(value); end

end

module Section::ModelRelationShared
  extend T::Sig

  sig { returns(Section::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Section::ActiveRecord_Relation) }
  def except(*args, &block); end

end
