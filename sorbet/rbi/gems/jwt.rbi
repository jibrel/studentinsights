# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jwt/all/jwt.rbi
#
# jwt-2.1.0
module JWT
  def allowed_algorithms(options); end
  def decode(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def decode_verify_signature(key, header, payload, signature, signing_input, options, &keyfinder); end
  def encode(payload, key, algorithm = nil, header_fields = nil); end
  def self.allowed_algorithms(options); end
  def self.decode(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def self.decode_verify_signature(key, header, payload, signature, signing_input, options, &keyfinder); end
  def self.encode(payload, key, algorithm = nil, header_fields = nil); end
  def self.signature_algorithm_and_key(header, payload, key, &keyfinder); end
  def signature_algorithm_and_key(header, payload, key, &keyfinder); end
  include JWT::DefaultOptions
end
class JWT::Decode
  def decode_header_and_payload(header_segment, payload_segment); end
  def decode_segments; end
  def header; end
  def initialize(jwt, verify); end
  def payload; end
  def raw_segments; end
  def self.base64url_decode(str); end
  def signature; end
end
module JWT::DefaultOptions
end
class JWT::Encode
  def algorithm; end
  def encode_segments; end
  def encoded_header; end
  def encoded_payload; end
  def encoded_signature(signing_input); end
  def header_fields; end
  def initialize(payload, key, algorithm, header_fields); end
  def key; end
  def payload; end
  def segments; end
  def self.base64url_encode(str); end
end
class JWT::EncodeError < StandardError
end
class JWT::DecodeError < StandardError
end
class JWT::VerificationError < JWT::DecodeError
end
class JWT::ExpiredSignature < JWT::DecodeError
end
class JWT::IncorrectAlgorithm < JWT::DecodeError
end
class JWT::ImmatureSignature < JWT::DecodeError
end
class JWT::InvalidIssuerError < JWT::DecodeError
end
class JWT::InvalidIatError < JWT::DecodeError
end
class JWT::InvalidAudError < JWT::DecodeError
end
class JWT::InvalidSubError < JWT::DecodeError
end
class JWT::InvalidJtiError < JWT::DecodeError
end
class JWT::InvalidPayload < JWT::DecodeError
end
module JWT::SecurityUtils
  def asn1_to_raw(signature, public_key); end
  def raw_to_asn1(signature, private_key); end
  def rbnacl_fixup(algorithm, key); end
  def secure_compare(left, right); end
  def self.asn1_to_raw(signature, public_key); end
  def self.raw_to_asn1(signature, private_key); end
  def self.rbnacl_fixup(algorithm, key); end
  def self.secure_compare(left, right); end
  def self.verify_rsa(algorithm, public_key, signing_input, signature); end
  def verify_rsa(algorithm, public_key, signing_input, signature); end
end
module JWT::Algos
end
module JWT::Algos::Hmac
  def self.sign(to_sign); end
  def self.verify(to_verify); end
  def sign(to_sign); end
  def verify(to_verify); end
end
module JWT::Algos::Eddsa
  def self.sign(to_sign); end
  def self.verify(to_verify); end
  def sign(to_sign); end
  def verify(to_verify); end
end
module JWT::Algos::Ecdsa
  def self.sign(to_sign); end
  def self.verify(to_verify); end
  def sign(to_sign); end
  def verify(to_verify); end
end
module JWT::Algos::Rsa
  def self.sign(to_sign); end
  def self.verify(to_verify); end
  def sign(to_sign); end
  def verify(to_verify); end
end
module JWT::Algos::Unsupported
  def self.sign(*arg0); end
  def self.verify(*arg0); end
  def sign(*arg0); end
  def verify(*arg0); end
end
module JWT::Signature
  def sign(algorithm, msg, key); end
  def verify(algorithm, key, signing_input, signature); end
  extend JWT::Signature
end
class JWT::Signature::ToSign < Struct
  def algorithm; end
  def algorithm=(_); end
  def key; end
  def key=(_); end
  def msg; end
  def msg=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class JWT::Signature::ToVerify < Struct
  def algorithm; end
  def algorithm=(_); end
  def public_key; end
  def public_key=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def signature; end
  def signature=(_); end
  def signing_input; end
  def signing_input=(_); end
end
class JWT::Verify
  def exp_leeway; end
  def global_leeway; end
  def iat_leeway; end
  def initialize(payload, options); end
  def nbf_leeway; end
  def self.verify_aud(payload, options); end
  def self.verify_claims(payload, options); end
  def self.verify_expiration(payload, options); end
  def self.verify_iat(payload, options); end
  def self.verify_iss(payload, options); end
  def self.verify_jti(payload, options); end
  def self.verify_not_before(payload, options); end
  def self.verify_sub(payload, options); end
  def verify_aud; end
  def verify_expiration; end
  def verify_iat; end
  def verify_iss; end
  def verify_jti; end
  def verify_not_before; end
  def verify_sub; end
end
