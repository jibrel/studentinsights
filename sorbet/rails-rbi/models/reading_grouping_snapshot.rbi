# This is an autogenerated file for dynamic methods in ReadingGroupingSnapshot
# Please rerun rake rails_rbi:models to regenerate.
# typed: true

class ReadingGroupingSnapshot::ActiveRecord_Relation < ActiveRecord::Relation
  include ReadingGroupingSnapshot::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: ReadingGroupingSnapshot)
end

class ReadingGroupingSnapshot::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include ReadingGroupingSnapshot::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: ReadingGroupingSnapshot)
end

class ReadingGroupingSnapshot < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend ReadingGroupingSnapshot::ModelRelationShared
  include ReadingGroupingSnapshot::InstanceMethods
  Elem = type_template(fixed: ReadingGroupingSnapshot)
end

module ReadingGroupingSnapshot::InstanceMethods
  extend T::Sig

  sig { returns(String) }
  def benchmark_period_key(); end

  sig { params(value: String).void }
  def benchmark_period_key=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def benchmark_period_key?(*args); end

  sig { returns(Integer) }
  def benchmark_school_year(); end

  sig { params(value: Integer).void }
  def benchmark_school_year=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def benchmark_school_year?(*args); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def educator_id(); end

  sig { params(value: Integer).void }
  def educator_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def educator_id?(*args); end

  sig { returns(String) }
  def grade(); end

  sig { params(value: String).void }
  def grade=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def grade?(*args); end

  sig { returns(String) }
  def grouping_workspace_id(); end

  sig { params(value: String).void }
  def grouping_workspace_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def grouping_workspace_id?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(Integer) }
  def school_id(); end

  sig { params(value: Integer).void }
  def school_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def school_id?(*args); end

  sig { returns(T.any(Array, T::Boolean, Float, Hash, Integer, String)) }
  def snapshot_json(); end

  sig { params(value: T.any(Array, T::Boolean, Float, Hash, Integer, String)).void }
  def snapshot_json=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def snapshot_json?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class ReadingGroupingSnapshot
  extend T::Sig

  sig { returns(::Educator) }
  def educator(); end

  sig { params(value: ::Educator).void }
  def educator=(value); end

  sig { returns(::School) }
  def school(); end

  sig { params(value: ::School).void }
  def school=(value); end

end

module ReadingGroupingSnapshot::ModelRelationShared
  extend T::Sig

  sig { returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ReadingGroupingSnapshot::ActiveRecord_Relation) }
  def except(*args, &block); end

end
