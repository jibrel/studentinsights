# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rollbar/all/rollbar.rbi
#
# rollbar-2.15.5
module Rollbar
  def self.clear_notifier!; end
  def self.configuration; end
  def self.configure(&block); end
  def self.critical(*args, &block); end
  def self.debug(*args, &block); end
  def self.error(*args, &block); end
  def self.info(*args, &block); end
  def self.last_report; end
  def self.last_report=(report); end
  def self.log(*args, &block); end
  def self.log_debug(*args, &block); end
  def self.log_error(*args, &block); end
  def self.log_info(*args, &block); end
  def self.log_warning(*args, &block); end
  def self.logger(*args, &block); end
  def self.notifier; end
  def self.notifier=(notifier); end
  def self.plugins; end
  def self.plugins=(arg0); end
  def self.preconfigure(&block); end
  def self.process_from_async_handler(*args, &block); end
  def self.process_item(*args, &block); end
  def self.reconfigure(&block); end
  def self.report_exception(exception, request_data = nil, person_data = nil, level = nil); end
  def self.report_message(message, level = nil, extra_data = nil); end
  def self.report_message_with_request(message, level = nil, request_data = nil, person_data = nil, extra_data = nil); end
  def self.reset_notifier!; end
  def self.root_notifier; end
  def self.root_notifier=(arg0); end
  def self.safely?; end
  def self.scope!(options = nil); end
  def self.scope(*args, &block); end
  def self.scope_object(*args, &block); end
  def self.scoped(options = nil, config_overrides = nil); end
  def self.send_failsafe(*args, &block); end
  def self.silenced(*args, &block); end
  def self.unconfigure; end
  def self.warn(*args, &block); end
  def self.warning(*args, &block); end
  def self.with_config(overrides, &block); end
end
class Rollbar::Plugin
  def callables; end
  def configuration; end
  def dependencies; end
  def dependencies_satisfy?; end
  def dependency(&block); end
  def execute!(&block); end
  def execute(&block); end
  def initialize(name); end
  def load!; end
  def load?; end
  def loaded; end
  def loaded=(arg0); end
  def log_loading_error(e); end
  def name; end
  def require_dependency(file); end
end
class Rollbar::Plugins
  def collection; end
  def define(name, &block); end
  def initialize; end
  def load!; end
  def loaded?(name); end
  def plugin_files; end
  def require_all; end
end
class Rollbar::Configuration
  def [](option); end
  def access_token; end
  def access_token=(arg0); end
  def async_handler; end
  def async_handler=(arg0); end
  def before_process; end
  def before_process=(*handler); end
  def branch; end
  def branch=(arg0); end
  def code_version; end
  def code_version=(arg0); end
  def custom_data_method; end
  def custom_data_method=(arg0); end
  def default_logger; end
  def default_logger=(arg0); end
  def delayed_job_enabled; end
  def delayed_job_enabled=(arg0); end
  def disable_core_monkey_patch; end
  def disable_core_monkey_patch=(arg0); end
  def disable_monkey_patch; end
  def disable_monkey_patch=(arg0); end
  def disable_rack_monkey_patch; end
  def disable_rack_monkey_patch=(arg0); end
  def dj_threshold; end
  def dj_threshold=(arg0); end
  def enabled; end
  def enabled=(arg0); end
  def endpoint; end
  def endpoint=(arg0); end
  def environment; end
  def environment=(arg0); end
  def exception_level_filters; end
  def exception_level_filters=(arg0); end
  def failover_handlers; end
  def failover_handlers=(arg0); end
  def filepath; end
  def filepath=(arg0); end
  def framework; end
  def framework=(arg0); end
  def host; end
  def host=(arg0); end
  def ignored_person_ids; end
  def ignored_person_ids=(arg0); end
  def initialize; end
  def initialize_copy(orig); end
  def js_enabled; end
  def js_enabled=(arg0); end
  def js_options; end
  def js_options=(arg0); end
  def logger; end
  def logger=(arg0); end
  def merge!(options); end
  def merge(options); end
  def net_retries; end
  def net_retries=(arg0); end
  def open_timeout; end
  def open_timeout=(arg0); end
  def payload_options; end
  def payload_options=(arg0); end
  def person_email_method; end
  def person_email_method=(arg0); end
  def person_id_method; end
  def person_id_method=(arg0); end
  def person_method; end
  def person_method=(arg0); end
  def person_username_method; end
  def person_username_method=(arg0); end
  def populate_empty_backtraces; end
  def populate_empty_backtraces=(arg0); end
  def project_gem_paths; end
  def project_gems=(gems); end
  def proxy; end
  def proxy=(arg0); end
  def randomize_scrub_length; end
  def randomize_scrub_length=(arg0); end
  def report_dj_data; end
  def report_dj_data=(arg0); end
  def request_timeout; end
  def request_timeout=(arg0); end
  def root; end
  def root=(arg0); end
  def safely; end
  def safely=(arg0); end
  def safely?; end
  def scrub_fields; end
  def scrub_fields=(arg0); end
  def scrub_headers; end
  def scrub_headers=(arg0); end
  def scrub_password; end
  def scrub_password=(arg0); end
  def scrub_user; end
  def scrub_user=(arg0); end
  def send_extra_frame_data; end
  def send_extra_frame_data=(value); end
  def sidekiq_threshold; end
  def sidekiq_threshold=(arg0); end
  def transform; end
  def transform=(*handler); end
  def uncaught_exception_level; end
  def uncaught_exception_level=(arg0); end
  def use_async; end
  def use_async=(arg0); end
  def use_delayed_job(options = nil); end
  def use_eventmachine; end
  def use_eventmachine=(value); end
  def use_exception_level_filters_default; end
  def use_exception_level_filters_default=(arg0); end
  def use_resque(options = nil); end
  def use_shoryuken; end
  def use_sidekiq(options = nil); end
  def use_sidekiq=(value); end
  def use_sucker_punch; end
  def use_sucker_punch=(value); end
  def use_thread; end
  def user_ip_obfuscator_secret; end
  def user_ip_obfuscator_secret=(arg0); end
  def verify_ssl_peer; end
  def verify_ssl_peer=(arg0); end
  def web_base; end
  def web_base=(arg0); end
  def write_to_file; end
  def write_to_file=(arg0); end
end
class Rollbar::LoggerProxy
  def debug(message); end
  def error(message); end
  def info(message); end
  def initialize(object); end
  def log(level, message); end
  def object; end
  def warn(message); end
end
class Rollbar::Ignore < StandardError
end
class Rollbar::LazyStore
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def clone; end
  def data; end
  def eql?(other); end
  def find_value(key); end
  def initialize(initial_data); end
  def load_value(key); end
  def loaded_data; end
  def method_missing(method_sym, *args, &block); end
  def raw; end
  def respond_to?(method_sym); end
end
module Rollbar::Util
  def self.deep_copy(obj); end
  def self.deep_merge(hash1, hash2); end
  def self.enforce_valid_utf8(payload); end
  def self.iterate_and_update(obj, block); end
  def self.iterate_and_update_hash(hash, block); end
  def self.truncate(str, length); end
  def self.uuid_rollbar_url(data, configuration); end
end
module Rollbar::Util::Hash
  def self.deep_stringify_keys(hash); end
  def self.map_value(thing, m); end
end
module Rollbar::JSON
  def adapter_options; end
  def detect_multi_json_adapter; end
  def dump(object); end
  def find_options_module; end
  def load(string); end
  def multi_json_adapter_module_name; end
  def options_module; end
  def options_module=(arg0); end
  def with_adapter(&block); end
  extend Rollbar::JSON
end
module Rollbar::JSON::Oj
  def options; end
  extend Rollbar::JSON::Oj
end
module Rollbar::JSON::Default
  def options; end
  extend Rollbar::JSON::Default
end
module Rollbar::LanguageSupport
  def can_scrub_url?; end
  def const_defined?(mod, target, inherit = nil); end
  def const_get(mod, target, inherit = nil); end
  def ruby_18?; end
  def ruby_19?; end
  def timeout_exceptions; end
  def version?(version); end
  extend Rollbar::LanguageSupport
end
module Rollbar::Delay
end
class Rollbar::Delay::GirlFriday
  def call(payload); end
  def self.call(payload); end
  def self.queue; end
  def self.queue_class; end
end
class Rollbar::Delay::Thread
  def call(payload); end
  def self.build_reaper_thread; end
  def self.call(payload); end
  def self.configure_exit_handler; end
  def self.reaper; end
  def self.spawn_threads_reaper; end
  def self.threads; end
end
class Rollbar::Delay::Thread::Error < StandardError
end
class Rollbar::Delay::Thread::TimeoutError < Rollbar::Delay::Thread::Error
end
class Rollbar::Item
  def [](*args, &block); end
  def build; end
  def build_backtrace_body; end
  def build_body; end
  def build_data; end
  def build_environment; end
  def build_extra; end
  def build_message_body; end
  def configuration; end
  def custom_data; end
  def custom_data_method?; end
  def dump; end
  def enforce_valid_utf8; end
  def exception; end
  def extra; end
  def handle_too_large_payload(stringified_payload, final_payload); end
  def ignored?; end
  def initialize(options); end
  def level; end
  def logger; end
  def message; end
  def notifier; end
  def payload; end
  def payload=(arg0); end
  def report_custom_data_error(e); end
  def scope; end
  def self.build_with(payload, options = nil); end
  def server_data; end
  def transform; end
  def transform_options; end
  extend Forwardable
end
class Rollbar::Item::Frame
  def backtrace; end
  def code_data(file_lines, lineno); end
  def configuration; end
  def context_data(file_lines, lineno); end
  def extra_frame_data(filename, lineno); end
  def frame; end
  def initialize(backtrace, frame, options = nil); end
  def outside_project?(filename); end
  def post_data(file_lines, lineno); end
  def pre_data(file_lines, lineno); end
  def skip_extra_frame_data?(filename, file_lines); end
  def to_h; end
  def unknown_frame; end
end
class Rollbar::Item::Backtrace
  def build; end
  def configuration; end
  def exception; end
  def exception_backtrace(current_exception); end
  def extra; end
  def files; end
  def get_file_lines(filename); end
  def initialize(exception, options = nil); end
  def map_frames(current_exception); end
  def message; end
  def read_file(filename); end
  def rollbar_lib_gem_dir; end
  def to_h; end
  def trace_chain; end
  def trace_data(current_exception); end
end
module Rollbar::Encoding
  def self.encode(object); end
  def self.encoding_class; end
  def self.encoding_class=(arg0); end
  def self.setup; end
end
class Rollbar::Encoding::Encoder
  def detect_encoding(v); end
  def encode; end
  def encoding_args(value); end
  def force_encoding(value); end
  def initialize(object); end
  def object; end
  def object=(arg0); end
end
module Rollbar::Truncation
  def self.truncate(payload); end
  extend Rollbar::Truncation::Mixin
end
module Rollbar::Truncation::Mixin
  def dump(payload); end
  def select_frames(frames, range = nil); end
  def truncate?(result); end
end
class Rollbar::Truncation::RawStrategy
  def call(payload); end
  def self.call(payload); end
  include Rollbar::Truncation::Mixin
end
class Rollbar::Truncation::FramesStrategy
  def call(payload); end
  def self.call(payload); end
  def truncate_trace(body); end
  def truncate_trace_chain(body); end
  include Rollbar::Truncation::Mixin
end
class Rollbar::Truncation::StringsStrategy
  def call(payload); end
  def self.call(payload); end
  def truncate_strings_proc(threshold); end
  include Rollbar::Truncation::Mixin
end
class Rollbar::Truncation::MinBodyStrategy
  def call(payload); end
  def self.call(payload); end
  def truncate_trace_data(trace_data); end
  include Rollbar::Truncation::Mixin
end
class Rollbar::Notifier
  def async_failover(item); end
  def build_item(level, message, exception, extra); end
  def call_before_process(options); end
  def configuration; end
  def configuration=(arg0); end
  def configure; end
  def critical(*args); end
  def debug(*args); end
  def default_async_handler; end
  def do_post(uri, body, access_token); end
  def do_write_item(item); end
  def error(*args); end
  def extract_arguments(args); end
  def failsafe_body(reason); end
  def failsafe_reason(message, exception); end
  def filtered_level(exception); end
  def handle_net_retries; end
  def handle_response(response); end
  def http_proxy(uri); end
  def http_proxy_for_em(uri); end
  def ignored?(exception, use_exception_level_filters = nil); end
  def info(*args); end
  def initialize(parent_notifier = nil, payload_options = nil, scope = nil); end
  def last_report; end
  def last_report=(arg0); end
  def log(level, *args); end
  def log_debug(message); end
  def log_error(message); end
  def log_info(message); end
  def log_instance_link(data); end
  def log_warn(message); end
  def log_warning(message); end
  def logger; end
  def lookup_exception_level(orig_level, exception, use_exception_level_filters); end
  def null_proxy; end
  def preconfigure; end
  def process_async_item(item); end
  def process_from_async_handler(payload); end
  def process_item(item); end
  def proxy_from_config; end
  def proxy_from_env(uri); end
  def reconfigure; end
  def report(level, message, exception, extra); end
  def report_internal_error(exception); end
  def reset!; end
  def safely; end
  def schedule_item(item); end
  def scope!(options = nil, config_overrides = nil); end
  def scope(scope_overrides = nil, config_overrides = nil); end
  def scope_object; end
  def scope_object=(arg0); end
  def send_failsafe(message, exception, uuid = nil, host = nil); end
  def send_item(item); end
  def send_item_using_eventmachine(item, uri); end
  def silenced; end
  def skip_retries?; end
  def ssl_verify_mode; end
  def unconfigure; end
  def use_exception_level_filters?(options); end
  def warn(*args); end
  def warning(*args); end
  def write_item(item); end
end
module Rollbar::RailtieMixin
  extend ActiveSupport::Concern
end
class Rollbar::Railtie < Rails::Railtie
  include Rollbar::RailtieMixin
end
module Rollbar::Js
end
module Rollbar::Js::Frameworks
end
class Rollbar::Js::Frameworks::Rails
  def after_secure_headers(&block); end
  def load(plugin); end
  def plugin_execute_proc_body(plugin); end
  def secure_headers_middleware?; end
end
module Rollbar::Rake
  def self.patch!; end
  def self.patch?; end
  def self.patched; end
  def self.patched=(arg0); end
  def self.patched?; end
  def self.rake_version; end
  def self.skip_patch; end
end
module Rollbar::Rake::Handler
  def display_error_message_with_rollbar(ex); end
  def self.included(base); end
end
module Rollbar::ActiveRecordExtension
  def report_validation_errors_to_rollbar; end
end
module ActiveModel::Validations
  include Rollbar::ActiveRecordExtension
end
class ActiveRecord::Base
  include Rollbar::ActiveRecordExtension
end
module Rollbar::ActiveJob
  def self.included(base); end
end
module Rollbar::Scrubbers
  def random_filtered_value; end
  def scrub_value(value); end
  extend Rollbar::Scrubbers
end
class Rollbar::Scrubbers::URL
  def build_regex(fields); end
  def call(options = nil); end
  def decode_www_form(query); end
  def encode_www_form(params); end
  def filter(url, regex, scrub_user, scrub_password, randomize_scrub_length); end
  def filter_key?(key, regex); end
  def filter_password(password, scrub_password, randomize_scrub_length); end
  def filter_query(query, regex, randomize_scrub_length); end
  def filter_query_params(params, regex, randomize_scrub_length); end
  def filter_user(user, scrub_user, randomize_scrub_length); end
  def filtered_value(value, randomize_scrub_length); end
  def random_filtered_value; end
  def self.call(*args); end
end
class Rollbar::Scrubbers::Params
  def attachment_value(value); end
  def build_fields_regex(config, extra_fields); end
  def build_scrub_options(config, extra_fields); end
  def call(options = nil); end
  def rollbar_filtered_param_value(value); end
  def scrub(params, options); end
  def scrub_array(array, options); end
  def scrub_value(value); end
  def self.call(*args); end
  def skip_value?(value); end
end
module Rollbar::Util::IPObfuscator
  def self.obfuscate_ip(ip_string); end
end
module Rollbar::RequestDataExtractor
  def extract_person_data_from_controller(env); end
  def extract_request_data_from_rack(env); end
  def find_not_private_ip(ips); end
  def json_request?(rack_req); end
  def mergeable_raw_body_params(rack_req); end
  def rollbar_get_params(rack_req); end
  def rollbar_headers(env); end
  def rollbar_post_params(rack_req); end
  def rollbar_raw_body_params(rack_req); end
  def rollbar_request_cookies(rack_req); end
  def rollbar_request_method(env); end
  def rollbar_request_session(env); end
  def rollbar_route_params(env); end
  def rollbar_url(env); end
  def rollbar_user_ip(env); end
  def scrub_params(params, sensitive_params); end
  def scrub_url(url, sensitive_params); end
  def sensitive_headers_list; end
  def sensitive_params_list(env); end
  def x_forwarded_for_client(header_value); end
end
module Rollbar::ExceptionReporter
  def report_exception_to_rollbar(env, exception); end
end
module Rollbar::Middleware
end
module Rollbar::Middleware::Rails
end
class Rollbar::Middleware::Rails::RollbarMiddleware
  def call(env); end
  def context(request_data); end
  def extract_request_data(env); end
  def fetch_scope(env); end
  def initialize(app); end
  def person_data_proc(env); end
  def request_data(env); end
  def request_data=(value); end
  include Rollbar::ExceptionReporter
  include Rollbar::RequestDataExtractor
end
module Rollbar::Middleware::Rails::ShowExceptions
  def call_with_rollbar(env); end
  def extract_scope_from(env); end
  def render_exception_with_rollbar(env, exception); end
  def self.included(base); end
  include Rollbar::ExceptionReporter
end
module Rollbar::Rails
end
module Rollbar::Rails::ControllerMethods
  def ratchetio_person_data; end
  def ratchetio_request_data; end
  def rollbar_person_data; end
  def rollbar_request_data; end
  include Rollbar::RequestDataExtractor
end
class Rollbar::Middleware::Rack
  def call(env); end
  def fetch_scope(env); end
  def framework_error(env); end
  def initialize(app); end
  def person_data_proc(env); end
  include Rollbar::ExceptionReporter
  include Rollbar::RequestDataExtractor
end
module Rollbar::Middleware::Rack::Builder
  def call_with_rollbar(env); end
  def fetch_scope(env); end
  def person_data_proc(env); end
  def self.included(base); end
  include Rollbar::ExceptionReporter
  include Rollbar::RequestDataExtractor
end
module Rollbar::Middleware::Rack::TestSession
  def env_for_with_rollbar(path, env); end
  def self.included(base); end
  include Rollbar::ExceptionReporter
end
