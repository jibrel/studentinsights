# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/platform-api/all/platform-api.rbi
#
# platform-api-2.1.0
module PlatformAPI
  def self.connect(api_key, options = nil); end
  def self.connect_oauth(oauth_token, options = nil); end
  def self.connect_token(token, options = nil); end
  def self.custom_options(options); end
  def self.default_options; end
end
class PlatformAPI::Client
  def account; end
  def account_feature; end
  def addon; end
  def addon_action; end
  def addon_attachment; end
  def addon_config; end
  def addon_plan_action; end
  def addon_region_capability; end
  def addon_service; end
  def app; end
  def app_feature; end
  def app_formation_set; end
  def app_setup; end
  def app_transfer; end
  def build; end
  def build_result; end
  def buildpack_installation; end
  def collaborator; end
  def config_var; end
  def credit; end
  def domain; end
  def dyno; end
  def dyno_size; end
  def event; end
  def failed_event; end
  def filter_apps; end
  def formation; end
  def identity_provider; end
  def inbound_ruleset; end
  def initialize(client); end
  def invitation; end
  def invoice; end
  def invoice_address; end
  def key; end
  def log_drain; end
  def log_session; end
  def oauth_authorization; end
  def oauth_client; end
  def oauth_grant; end
  def oauth_token; end
  def organization; end
  def organization_addon; end
  def organization_app; end
  def organization_app_collaborator; end
  def organization_app_permission; end
  def organization_feature; end
  def organization_invitation; end
  def organization_invoice; end
  def organization_member; end
  def organization_preferences; end
  def outbound_ruleset; end
  def password_reset; end
  def pipeline; end
  def pipeline_coupling; end
  def pipeline_promotion; end
  def pipeline_promotion_target; end
  def plan; end
  def rate_limit; end
  def region; end
  def release; end
  def slug; end
  def sms_number; end
  def sni_endpoint; end
  def source; end
  def space; end
  def space_app_access; end
  def space_nat; end
  def ssl_endpoint; end
  def stack; end
  def team; end
  def team_app; end
  def team_app_collaborator; end
  def team_app_permission; end
  def team_feature; end
  def team_invitation; end
  def team_invoice; end
  def team_member; end
  def team_preferences; end
  def user_preferences; end
  def whitelisted_addon_service; end
end
class PlatformAPI::AccountFeature
  def info(account_feature_id_or_account_feature_name); end
  def initialize(client); end
  def list; end
  def update(account_feature_id_or_account_feature_name, body = nil); end
end
class PlatformAPI::Account
  def delete; end
  def delete_by_user(account_email_or_account_id_or_account_self); end
  def info; end
  def info_by_user(account_email_or_account_id_or_account_self); end
  def initialize(client); end
  def update(body = nil); end
  def update_by_user(account_email_or_account_id_or_account_self, body = nil); end
end
class PlatformAPI::AddonAction
  def deprovision(addon_id_or_addon_name); end
  def initialize(client); end
  def provision(addon_id_or_addon_name); end
end
class PlatformAPI::AddonAttachment
  def create(body = nil); end
  def delete(addon_attachment_id); end
  def info(addon_attachment_id); end
  def info_by_app(app_id_or_app_name, addon_attachment_id_or_addon_attachment_name); end
  def initialize(client); end
  def list; end
  def list_by_addon(addon_id_or_addon_name); end
  def list_by_app(app_id_or_app_name); end
end
class PlatformAPI::AddonConfig
  def initialize(client); end
  def list(addon_id_or_addon_name); end
  def update(addon_id_or_addon_name, body = nil); end
end
class PlatformAPI::AddonPlanAction
  def initialize(client); end
end
class PlatformAPI::AddonRegionCapability
  def initialize(client); end
  def list; end
  def list_by_addon_service(addon_service_id_or_addon_service_name); end
  def list_by_region(region_id_or_region_name); end
end
class PlatformAPI::AddonService
  def info(addon_service_id_or_addon_service_name); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::Addon
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, addon_id_or_addon_name); end
  def info(addon_id_or_addon_name); end
  def info_by_app(app_id_or_app_name, addon_id_or_addon_name); end
  def initialize(client); end
  def list; end
  def list_by_app(app_id_or_app_name); end
  def list_by_team(team_name_or_team_id); end
  def list_by_user(account_email_or_account_id_or_account_self); end
  def update(app_id_or_app_name, addon_id_or_addon_name, body = nil); end
end
class PlatformAPI::AppFeature
  def info(app_id_or_app_name, app_feature_id_or_app_feature_name); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def update(app_id_or_app_name, app_feature_id_or_app_feature_name, body = nil); end
end
class PlatformAPI::AppFormationSet
  def initialize(client); end
end
class PlatformAPI::AppSetup
  def create(body = nil); end
  def info(app_setup_id); end
  def initialize(client); end
end
class PlatformAPI::AppTransfer
  def create(body = nil); end
  def delete(app_transfer_id_or_app_name); end
  def info(app_transfer_id_or_app_name); end
  def initialize(client); end
  def list; end
  def update(app_transfer_id_or_app_name, body = nil); end
end
class PlatformAPI::App
  def create(body = nil); end
  def delete(app_id_or_app_name); end
  def disable_acm(app_id_or_app_name); end
  def enable_acm(app_id_or_app_name); end
  def info(app_id_or_app_name); end
  def initialize(client); end
  def list; end
  def list_owned_and_collaborated(account_email_or_account_id_or_account_self); end
  def refresh_acm(app_id_or_app_name); end
  def update(app_id_or_app_name, body = nil); end
end
class PlatformAPI::BuildResult
  def info(app_id_or_app_name, build_id); end
  def initialize(client); end
end
class PlatformAPI::Build
  def create(app_id_or_app_name, body = nil); end
  def info(app_id_or_app_name, build_id); end
  def initialize(client); end
  def list(app_id_or_app_name); end
end
class PlatformAPI::BuildpackInstallation
  def initialize(client); end
  def list(app_id_or_app_name); end
  def update(app_id_or_app_name, body = nil); end
end
class PlatformAPI::Collaborator
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, collaborator_email_or_collaborator_id); end
  def info(app_id_or_app_name, collaborator_email_or_collaborator_id); end
  def initialize(client); end
  def list(app_id_or_app_name); end
end
class PlatformAPI::ConfigVar
  def info_for_app(app_id_or_app_name); end
  def info_for_app_release(app_id_or_app_name, release_id_or_release_version); end
  def initialize(client); end
  def update(app_id_or_app_name, body = nil); end
end
class PlatformAPI::Credit
  def create(body = nil); end
  def info(credit_id); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::Domain
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, domain_id_or_domain_hostname); end
  def info(app_id_or_app_name, domain_id_or_domain_hostname); end
  def initialize(client); end
  def list(app_id_or_app_name); end
end
class PlatformAPI::DynoSize
  def info(dyno_size_id_or_dyno_size_name); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::Dyno
  def create(app_id_or_app_name, body = nil); end
  def info(app_id_or_app_name, dyno_id_or_dyno_name); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def restart(app_id_or_app_name, dyno_id_or_dyno_name); end
  def restart_all(app_id_or_app_name); end
  def stop(app_id_or_app_name, dyno_id_or_dyno_name); end
end
class PlatformAPI::Event
  def initialize(client); end
end
class PlatformAPI::FailedEvent
  def initialize(client); end
end
class PlatformAPI::FilterApps
  def apps(body = nil); end
  def initialize(client); end
end
class PlatformAPI::Formation
  def batch_update(app_id_or_app_name, body = nil); end
  def info(app_id_or_app_name, formation_id_or_formation_type); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def update(app_id_or_app_name, formation_id_or_formation_type, body = nil); end
end
class PlatformAPI::IdentityProvider
  def create_by_organization(organization_name, body = nil); end
  def create_by_team(team_name_or_team_id, body = nil); end
  def delete_by_organization(organization_name, identity_provider_id); end
  def delete_by_team(team_name, identity_provider_id); end
  def initialize(client); end
  def list_by_organization(organization_name); end
  def list_by_team(team_name_or_team_id); end
  def update_by_organization(organization_name, identity_provider_id, body = nil); end
  def update_by_team(team_name_or_team_id, identity_provider_id, body = nil); end
end
class PlatformAPI::InboundRuleset
  def create(space_id_or_space_name, body = nil); end
  def current(space_id_or_space_name); end
  def info(space_id_or_space_name, inbound_ruleset_id); end
  def initialize(client); end
  def list(space_id_or_space_name); end
end
class PlatformAPI::Invitation
  def create(body = nil); end
  def finalize(invitation_token, body = nil); end
  def info(invitation_token); end
  def initialize(client); end
  def send_verification_code(invitation_token, body = nil); end
  def verify(invitation_token, body = nil); end
end
class PlatformAPI::InvoiceAddress
  def info; end
  def initialize(client); end
  def update(body = nil); end
end
class PlatformAPI::Invoice
  def info(invoice_number); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::Key
  def info(key_id_or_key_fingerprint); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::LogDrain
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, log_drain_id_or_log_drain_url_or_log_drain_token); end
  def info(app_id_or_app_name, log_drain_id_or_log_drain_url_or_log_drain_token); end
  def initialize(client); end
  def list(app_id_or_app_name); end
end
class PlatformAPI::LogSession
  def create(app_id_or_app_name, body = nil); end
  def initialize(client); end
end
class PlatformAPI::OauthAuthorization
  def create(body = nil); end
  def delete(oauth_authorization_id); end
  def info(oauth_authorization_id); end
  def initialize(client); end
  def list; end
  def regenerate(oauth_authorization_id); end
end
class PlatformAPI::OauthClient
  def create(body = nil); end
  def delete(oauth_client_id); end
  def info(oauth_client_id); end
  def initialize(client); end
  def list; end
  def rotate_credentials(oauth_client_id); end
  def update(oauth_client_id, body = nil); end
end
class PlatformAPI::OauthGrant
  def initialize(client); end
end
class PlatformAPI::OauthToken
  def create(body = nil); end
  def delete(oauth_token_id); end
  def initialize(client); end
end
class PlatformAPI::OrganizationAddon
  def initialize(client); end
  def list_for_organization(organization_name_or_organization_id); end
end
class PlatformAPI::OrganizationAppCollaborator
  def create(app_id_or_app_name, body = nil); end
  def delete(app_name, collaborator_email); end
  def info(app_name, collaborator_email); end
  def initialize(client); end
  def list(app_name); end
  def update(app_name, collaborator_email, body = nil); end
end
class PlatformAPI::OrganizationApp
  def create(body = nil); end
  def info(app_name); end
  def initialize(client); end
  def list; end
  def list_for_organization(organization_name_or_organization_id); end
  def transfer_to_account(app_name, body = nil); end
  def transfer_to_organization(app_name, body = nil); end
  def update_locked(app_name, body = nil); end
end
class PlatformAPI::OrganizationFeature
  def info(organization_name_or_organization_id, organization_feature_id_or_organization_feature_name); end
  def initialize(client); end
  def list(organization_name_or_organization_id); end
  def update(organization_name_or_organization_id, organization_feature_id_or_organization_feature_name, body = nil); end
end
class PlatformAPI::OrganizationInvitation
  def accept(organization_invitation_token); end
  def create(organization_name_or_organization_id, body = nil); end
  def get(organization_invitation_token); end
  def initialize(client); end
  def list(organization_name); end
  def revoke(organization_name_or_organization_id, organization_invitation_id); end
end
class PlatformAPI::OrganizationInvoice
  def info(organization_name_or_organization_id, organization_invoice_number); end
  def initialize(client); end
  def list(organization_name_or_organization_id); end
end
class PlatformAPI::OrganizationMember
  def app_list(organization_name_or_organization_id, organization_member_email_or_organization_member_id); end
  def create(organization_name_or_organization_id, body = nil); end
  def create_or_update(organization_name_or_organization_id, body = nil); end
  def delete(organization_name_or_organization_id, organization_member_email_or_organization_member_id); end
  def initialize(client); end
  def list(organization_name_or_organization_id); end
  def update(organization_name_or_organization_id, body = nil); end
end
class PlatformAPI::OrganizationPreferences
  def initialize(client); end
  def list(organization_preferences_identity); end
  def update(organization_preferences_identity, body = nil); end
end
class PlatformAPI::Organization
  def create(body = nil); end
  def delete(organization_name_or_organization_id); end
  def info(organization_name_or_organization_id); end
  def initialize(client); end
  def list; end
  def update(organization_name_or_organization_id, body = nil); end
end
class PlatformAPI::OutboundRuleset
  def create(space_id_or_space_name, body = nil); end
  def current(space_id_or_space_name); end
  def info(space_id_or_space_name, outbound_ruleset_id); end
  def initialize(client); end
  def list(space_id_or_space_name); end
end
class PlatformAPI::PasswordReset
  def complete_reset_password(password_reset_reset_password_token, body = nil); end
  def initialize(client); end
  def reset_password(body = nil); end
end
class PlatformAPI::OrganizationAppPermission
  def initialize(client); end
  def list; end
end
class PlatformAPI::PipelineCoupling
  def create(body = nil); end
  def delete(pipeline_coupling_id); end
  def info(pipeline_coupling_id); end
  def info_by_app(app_id_or_app_name); end
  def initialize(client); end
  def list; end
  def list_by_pipeline(pipeline_id); end
  def update(pipeline_coupling_id, body = nil); end
end
class PlatformAPI::PipelinePromotionTarget
  def initialize(client); end
  def list(pipeline_promotion_id); end
end
class PlatformAPI::PipelinePromotion
  def create(body = nil); end
  def info(pipeline_promotion_id); end
  def initialize(client); end
end
class PlatformAPI::Pipeline
  def create(body = nil); end
  def delete(pipeline_id); end
  def info(pipeline_id_or_pipeline_name); end
  def initialize(client); end
  def list; end
  def update(pipeline_id, body = nil); end
end
class PlatformAPI::Plan
  def info(plan_id_or_plan_name); end
  def info_by_addon(addon_service_id_or_addon_service_name, plan_id_or_plan_name); end
  def initialize(client); end
  def list_by_addon(addon_service_id_or_addon_service_name); end
end
class PlatformAPI::RateLimit
  def info; end
  def initialize(client); end
end
class PlatformAPI::Region
  def info(region_id_or_region_name); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::Release
  def create(app_id_or_app_name, body = nil); end
  def info(app_id_or_app_name, release_id_or_release_version); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def rollback(app_id_or_app_name, body = nil); end
end
class PlatformAPI::Slug
  def create(app_id_or_app_name, body = nil); end
  def info(app_id_or_app_name, slug_id); end
  def initialize(client); end
end
class PlatformAPI::SmsNumber
  def confirm(account_email_or_account_id_or_account_self); end
  def initialize(client); end
  def recover(account_email_or_account_id_or_account_self); end
  def sms_number(account_email_or_account_id_or_account_self); end
end
class PlatformAPI::SniEndpoint
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, sni_endpoint_id_or_sni_endpoint_name); end
  def info(app_id_or_app_name, sni_endpoint_id_or_sni_endpoint_name); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def update(app_id_or_app_name, sni_endpoint_id_or_sni_endpoint_name, body = nil); end
end
class PlatformAPI::Source
  def create; end
  def create_deprecated(app_id_or_app_name); end
  def initialize(client); end
end
class PlatformAPI::SpaceAppAccess
  def info(space_id_or_space_name, account_email_or_account_id_or_account_self); end
  def initialize(client); end
  def list(space_id_or_space_name); end
  def update(space_id_or_space_name, account_email_or_account_id_or_account_self, body = nil); end
end
class PlatformAPI::SpaceNat
  def info(space_id_or_space_name); end
  def initialize(client); end
end
class PlatformAPI::Space
  def create(body = nil); end
  def delete(space_id_or_space_name); end
  def info(space_id_or_space_name); end
  def initialize(client); end
  def list; end
  def update(space_id_or_space_name, body = nil); end
end
class PlatformAPI::SSLEndpoint
  def create(app_id_or_app_name, body = nil); end
  def delete(app_id_or_app_name, ssl_endpoint_id_or_ssl_endpoint_name); end
  def info(app_id_or_app_name, ssl_endpoint_id_or_ssl_endpoint_name); end
  def initialize(client); end
  def list(app_id_or_app_name); end
  def update(app_id_or_app_name, ssl_endpoint_id_or_ssl_endpoint_name, body = nil); end
end
class PlatformAPI::Stack
  def info(stack_name_or_stack_id); end
  def initialize(client); end
  def list; end
end
class PlatformAPI::TeamAppCollaborator
  def create(app_id_or_app_name, body = nil); end
  def delete(app_name, collaborator_email); end
  def info(app_name, collaborator_email); end
  def initialize(client); end
  def list(app_name); end
  def update(app_name, collaborator_email, body = nil); end
end
class PlatformAPI::TeamAppPermission
  def initialize(client); end
  def list; end
end
class PlatformAPI::TeamApp
  def create(body = nil); end
  def info(app_name); end
  def initialize(client); end
  def list; end
  def list_by_team(team_name_or_team_id); end
  def transfer_to_account(app_name, body = nil); end
  def transfer_to_team(app_name, body = nil); end
  def update_locked(app_name, body = nil); end
end
class PlatformAPI::TeamFeature
  def info(team_name_or_team_id, team_feature_id_or_team_feature_name); end
  def initialize(client); end
  def list(team_name_or_team_id); end
end
class PlatformAPI::TeamInvitation
  def accept(team_invitation_token); end
  def create(team_name_or_team_id, body = nil); end
  def get(team_invitation_token); end
  def initialize(client); end
  def list(team_name); end
  def revoke(team_name_or_team_id, team_invitation_id); end
end
class PlatformAPI::TeamInvoice
  def info(team_name_or_team_id, team_invoice_number); end
  def initialize(client); end
  def list(team_name_or_team_id); end
end
class PlatformAPI::TeamMember
  def create(team_name_or_team_id, body = nil); end
  def create_or_update(team_name_or_team_id, body = nil); end
  def delete(team_name_or_team_id, team_member_email_or_team_member_id); end
  def initialize(client); end
  def list(team_name_or_team_id); end
  def list_by_member(team_name_or_team_id, team_member_email_or_team_member_id); end
  def update(team_name_or_team_id, body = nil); end
end
class PlatformAPI::TeamPreferences
  def initialize(client); end
  def list(team_preferences_identity); end
  def update(team_preferences_identity, body = nil); end
end
class PlatformAPI::Team
  def create(body = nil); end
  def delete(team_name_or_team_id); end
  def info(team_name_or_team_id); end
  def initialize(client); end
  def list; end
  def update(team_name_or_team_id, body = nil); end
end
class PlatformAPI::UserPreferences
  def initialize(client); end
  def list(user_preferences_self); end
  def update(user_preferences_self, body = nil); end
end
class PlatformAPI::WhitelistedAddonService
  def create_by_organization(organization_name_or_organization_id, body = nil); end
  def create_by_team(team_name_or_team_id, body = nil); end
  def delete_by_organization(organization_name_or_organization_id, whitelisted_addon_service_id_or_addon_service_name); end
  def delete_by_team(team_name_or_team_id, whitelisted_addon_service_id_or_addon_service_name); end
  def initialize(client); end
  def list_by_organization(organization_name_or_organization_id); end
  def list_by_team(team_name_or_team_id); end
end
