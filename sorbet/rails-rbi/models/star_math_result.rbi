# This is an autogenerated file for dynamic methods in StarMathResult
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class StarMathResult::ActiveRecord_Relation < ActiveRecord::Relation
  include StarMathResult::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: StarMathResult)
end

class StarMathResult::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include StarMathResult::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: StarMathResult)
end

class StarMathResult < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend StarMathResult::ModelRelationShared
  include StarMathResult::InstanceMethods
  Elem = type_template(fixed: StarMathResult)
end

module StarMathResult::InstanceMethods
  extend T::Sig

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(DateTime) }
  def date_taken(); end

  sig { params(value: DateTime).void }
  def date_taken=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date_taken?(*args); end

  sig { returns(String) }
  def grade_equivalent(); end

  sig { params(value: String).void }
  def grade_equivalent=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def grade_equivalent?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(Integer) }
  def percentile_rank(); end

  sig { params(value: Integer).void }
  def percentile_rank=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def percentile_rank?(*args); end

  sig { returns(Integer) }
  def student_id(); end

  sig { params(value: Integer).void }
  def student_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def student_id?(*args); end

  sig { returns(Integer) }
  def total_time(); end

  sig { params(value: Integer).void }
  def total_time=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def total_time?(*args); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class StarMathResult
  extend T::Sig

  sig { returns(::Student) }
  def student(); end

  sig { params(value: ::Student).void }
  def student=(value); end

end

module StarMathResult::ModelRelationShared
  extend T::Sig

  sig { returns(StarMathResult::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(StarMathResult::ActiveRecord_Relation) }
  def except(*args, &block); end

end
